openapi: 3.0.3
info:
  title: Custom Shop API
  description: "An API for managing a shop of customizable products."
  version: 1.0.0
  contact:
    name: API Support
    email: karolni90@gmail.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /v1/admin/product-types:
    post:
      summary: Create a new product type
      description: Creates a product type along with its attributes and options.
      operationId: createProductType
      tags:
        - Admin - Product Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductTypeRequest"
      responses:
        "201":
          description: Product type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeResponse"
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get list of existing product types
      description: Returns a list of all existing product types with their ID, name, and configuration.
      operationId: getProductTypes
      tags:
        - Admin - Product Types
      responses:
        "200":
          description: Successfully retrieved the list of product types.
          content:
            application/json:
              schema:
                type: object
                properties:
                  productTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductTypeItemResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/admin/product-types/attributes:
    post:
      summary: Add attributes to an existing product type
      description: >
        Adds one or more attributes (with possible options) to an existing product type. 
        Only allowed if the product type is fully customizable.
      operationId: addAttributesToProductType
      tags:
        - Admin - Product Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddAttributesRequest"
      responses:
        "200":
          description: Attributes added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeDetailsResponse"
        "400":
          description: Bad request - Cannot add attributes to a non-fully-customizable product type or invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/admin/product-types/not-allowed-combinations:
    post:
      summary: Add not allowed combinations to a product type
      description: >
        Defines not allowed attribute-option combinations for a customizable product type. 
        Only applicable if the product type is fully customizable.
      operationId: addNotAllowedCombinations
      tags:
        - Admin - Product Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotAllowedCombinationsRequest"
      responses:
        "200":
          description: Not allowed combinations added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Not allowed combinations added successfully"
        "400":
          description: Bad request - Cannot add restrictions to a non-customizable product type or invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/admin/product-types/{productTypeId}:
    get:
      summary: Get product type details
      description: Returns detailed information about a specific product type, including its attributes, options, and not-allowed combinations.
      operationId: getProductTypeDetails
      tags:
        - Admin - Product Types
      parameters:
        - name: productTypeId
          in: path
          required: true
          description: The unique identifier of the product type.
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Successfully retrieved product type details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeDetailsResponse"
        "404":
          description: Product type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/admin/products:
    post:
      summary: Create a new product
      description: Creates a product with images, product details, and customization options.
      operationId: createProduct
      tags:
        - Admin - Product
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Cruiser Classic 7"
                sku:
                  type: string
                  example: "BIKE-001"
                description:
                  type: string
                  example: "A comfortable cruiser bike with a matte black finish."
                price:
                  type: number
                  format: float
                  example: 499.99
                productTypeId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
                main_picture:
                  type: string
                  format: binary
                image_gallery:
                  type: array
                  items:
                    type: string
                    format: binary
                attributeOverrides:
                  $ref: "#/components/schemas/ProductAttributeOverrides"
                notAllowedCombinationsOverrides:
                  $ref: "#/components/schemas/NotAllowedCombinationsOverrides"
                productNotAllowedCombinations:
                  $ref: "#/components/schemas/ProductNotAllowedCombinations"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCreationResponse"
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get paginated list of products for the admin dashboard
      description: Retrieves a paginated list of products with essential details for the admin dashboard.
      tags:
        - Admin - Product
      operationId: getAdminProductList
      parameters:
        - name: page
          in: query
          required: false
          description: Page number (default is 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          required: false
          description: Number of items per page (default is 10)
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Successfully retrieved product list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/admin/products/{productId}:
    get:
      summary: Get product details
      description: Retrieve detailed information about a product, including attributes, options, and not allowed combinations.
      operationId: getProductDetails
      tags:
        - Admin - Product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Successfully retrieved product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailsResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/products/{productId}/available-options:
    get:
      summary: Get available options for a requested attribute
      description: Retrieves available attribute options for a given product while considering not-allowed combinations and stock availability.
      operationId: getAvailableOptions
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: The UUID of the product for which available options are requested.
          schema:
            type: string
            format: uuid
        - name: requestedAttributeId
          in: query
          required: true
          description: The attribute ID whose available options should be retrieved.
          schema:
            type: integer
            format: int64
        - name: selectedOptionIds
          in: query
          required: true
          description: A comma-separated list of selected option IDs.
          schema:
            type: string
            example: "2,6,9"
      responses:
        "200":
          description: A list of available options for the requested attribute.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailableAttributeOptionsResponse"
        "400":
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/products/{productId}:
    get:
      summary: Get product details for customers
      description: Retrieves product details including active and in-stock attributes and options for display in the customer-facing UI.
      tags:
        - Product
      operationId: getProductDetailsForCustomer
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the product to retrieve.
      responses:
        "200":
          description: Successfully retrieved product details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailsCustomerResponse"
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/products:
    get:
      summary: Get paginated list of products
      description: Retrieves a paginated list of products with essential details.
      tags:
        - Product
      operationId: getProductList
      parameters:
        - name: page
          in: query
          required: false
          description: Page number (default is 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          required: false
          description: Number of items per page (default is 10)
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Successfully retrieved product list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ProductTypeRequest:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: "Bicycle"
        config:
          $ref: "#/components/schemas/ProductTypeRequestConfig"

    ProductTypeRequestConfig:
      type: object
      description: "config object for a product type."
      required:
        - customisation
      properties:
        customisation:
          type: string
          example: "fully_customizable"

    ProductTypeItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the product type.
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Name of the product type.
          example: "Bicycle"
        config:
          type: object
          properties:
            customisation:
              type: string
              description: Defines whether the product type is customizable.
              example: "fully_customizable"

    AddAttributesRequest:
      type: object
      required:
        - productTypeID
        - attributes
      properties:
        productTypeID:
          type: string
          example: 1
        attributes:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/AttributeRequest"
      example:
        productTypeID: 1
        attributes:
          - attributeName: "Frame Finish"
            possibleOptions: [ "Matte", "Shiny" ]
          - attributeName: "Wheels"
            possibleOptions: [ "Road Wheels", "Cruiser Wheels" ]

    AttributeRequest:
      type: object
      required:
        - attributeName
        - possibleOptions
      properties:
        attributeName:
          type: string
          minLength: 3
          maxLength: 100
          example: "Frame Type"
        possibleOptions:
          type: array
          minItems: 1
          items:
            type: string
          example: [ "Matte", "Shiny" ]

    ProductTypeResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product type created successfully"
        productTypeId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeResponse"

    AttributeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Frame Type"
        options:
          type: array
          items:
            type: string
          example: ["Full-suspension", "Diamond", "Step-through"]

    NotAllowedCombinationsRequest:
      type: object
      required:
        - productTypeId
        - notAllowedCombinations
      properties:
        productTypeId:
          type: string
          example: 1
        notAllowedCombinations:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 2
            items:
              $ref: "#/components/schemas/NotAllowedCombinationItem"
      example:
        productTypeId: 1
        notAllowedCombinations:
          - - attributeId: 101
              attributeOptionId: 1001
            - attributeId: 102
              attributeOptionId: 2002
          - - attributeId: 103
              attributeOptionId: 3003
            - attributeId: 104
              attributeOptionId: 4004
            - attributeId: 105
              attributeOptionId: 5005

    NotAllowedCombinationItem:
      type: object
      required:
        - attributeId
        - attributeOptionId
      properties:
        attributeId:
          type: integer
          format: int64
          example: 101
        attributeOptionId:
          type: integer
          format: int64
          example: 1001
    ProductTypeDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the product type.
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Name of the product type.
          example: "Bicycle"
        config:
          type: object
          properties:
            customization:
              type: string
              description: Defines whether the product type is customizable.
              example: "fully_customizable"
        attributes:
          type: array
          description: List of attributes associated with the product type.
          items:
            $ref: "#/components/schemas/ProductAttributeResponse"
        not_allowed_combinations:
          type: array
          description: List of not-allowed combinations for this product type.
          items:
            $ref: "#/components/schemas/NotAllowedCombinationR"

    ProductAttributeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the attribute.
          example: 1
        name:
          type: string
          description: Name of the attribute.
          example: "Frame Finish"
        options:
          type: array
          description: List of available options for this attribute.
          items:
            $ref: "#/components/schemas/AttributeOption"

    AttributeOption:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the attribute option.
          example: 101
        name:
          type: string
          description: Name of the option.
          example: "Matte"

    NotAllowedCombinationR:
      type: object
      properties:
        combination_id:
          type: integer
          format: int64
          description: Unique identifier of the not-allowed combination.
          example: 9001
        options:
          type: array
          description: List of options that form a not-allowed combination.
          items:
            $ref: "#/components/schemas/AttributeOption"
    ProductDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "Cruiser Classic 7"
        sku:
          type: string
          example: "CR-CLASSIC-7"
        description:
          type: string
          example: "A high-quality cruiser bicycle with a matte finish and durable wheels."
        price:
          type: number
          format: float
          example: 499.99
        mainPicture:
          type: string
          example: "https://yourserver.com/uploads/main_picture_550e8400-e29b-41d4-a716-446655440000.jpg"
        imageGallery:
          type: array
          items:
            type: string
          example:
            - "https://yourserver.com/uploads/image1.jpg"
            - "https://yourserver.com/uploads/image2.jpg"
        productType:
          $ref: "#/components/schemas/ProductTypeProduct"
        productAttributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeResponseProduct"
        productNotAllowedCombinations:
          type: array
          items:
            $ref: "#/components/schemas/NotAllowedCombinationResponse"
        specificNotAllowedCombinations:
          type: array
          items:
            $ref: "#/components/schemas/ProductNotAllowedCombinationResponse"

    ProductTypeProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "91a2b3c4-d5e6-7890-f1g2-h3i4j5k6l7m8"
        name:
          type: string
          example: "Bicycle"
        config:
          type: object
          properties:
            customisation:
              type: string
              example: "fullyCustomizable"

    AttributeResponseProduct:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 32
        name:
          type: string
          example: "Frame"
        active:
          type: boolean
          example: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/AttributeOptionResponse"

    AttributeOptionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 93
        name:
          type: string
          example: "frame1"
        outOfStock:
          type: boolean
          example: false
        active:
          type: boolean
          example: true

    NotAllowedCombinationResponse:
      type: object
      properties:
        combinationId:
          type: integer
          format: int64
          example: 4
        active:
          type: boolean
          example: true
        options:
          type: array
          items:
            $ref: "#/components/schemas/NotAllowedCombinationOptionResponse"

    ProductNotAllowedCombinationResponse:
      type: object
      properties:
        combinationId:
          type: integer
          format: int64
          example: 10
        options:
          type: array
          items:
            $ref: "#/components/schemas/NotAllowedCombinationOptionResponse"

    NotAllowedCombinationOptionResponse:
      type: object
      properties:
        attributeId:
          type: integer
          format: int64
          example: 101
        attributeOptionId:
          type: integer
          format: int64
          example: 1001

    ProductAttributeOverrides:
      type: object
      properties:
        deactivatedAttributes:
          type: array
          items:
            $ref: "#/components/schemas/DeactivatedAttribute"
        deactivatedOptions:
          type: array
          items:
            $ref: "#/components/schemas/DeactivatedOption"
        outOfStockOptions:
          type: array
          items:
            $ref: "#/components/schemas/DeactivatedOption"

    DeactivatedAttribute:
      type: object
      properties:
        attributeId:
          type: integer
          format: int64
          example: 32

    DeactivatedOption:
      type: object
      properties:
        attributeId:
          type: integer
          format: int64
          example: 33
        optionId:
          type: integer
          format: int64
          example: 96
        isOutOfStock:
          type: boolean

    NotAllowedCombinationsOverrides:
      type: object
      properties:
        deactivate:
          type: array
          items:
            $ref: "#/components/schemas/DeactivateCombination"

    DeactivateCombination:
      type: object
      properties:
        combinationId:
          type: integer
          format: int64
          example: 4

    ProductNotAllowedCombinations:
      type: array
      minItems: 1
      items:
        type: array
        minItems: 2
        items:
          $ref: "#/components/schemas/NotAllowedCombinationItem"

    ProductCreationResponse:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        message:
          type: string
          example: "Product created successfully"

    AvailableAttributeOptionsResponse:
      type: object
      required:
        - attributeId
        - attributeName
        - options
      properties:
        attributeId:
          type: integer
          format: int64
          description: The ID of the requested attribute.
        attributeName:
          type: string
          description: The name of the requested attribute.
        options:
          type: array
          items:
            $ref: "#/components/schemas/AttributeOption"
    ProductDetailsCustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the product.
        name:
          type: string
          description: The name of the product.
        sku:
          type: string
          description: The SKU (Stock Keeping Unit) of the product.
        description:
          type: string
          description: A description of the product.
        price:
          type: number
          format: float
          description: The price of the product.
        mainPicture:
          type: string
          description: URL of the main product picture.
        imageGallery:
          type: array
          items:
            type: string
          description: List of URLs for the product's image gallery.
        productAttributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeResponseCustomer"
          description: List of active and in-stock product attributes.

    AttributeResponseCustomer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the product attribute.
        name:
          type: string
          description: The name of the product attribute.
        options:
          type: array
          items:
            $ref: "#/components/schemas/AttributeOptionCustomer"
          description: List of available options for the attribute.

    AttributeOptionCustomer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the attribute option.
        name:
          type: string
          description: The name of the attribute option.

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductListItemResponse"
        currentPage:
          type: integer
          description: Current page number
        pageSize:
          type: integer
          description: Number of products per page
        totalItems:
          type: integer
          description: Total number of products
        totalPages:
          type: integer
          description: Total number of pages
        lastPage:
          type: boolean
          description: Indicates if this is the last page

    ProductListItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Product description
        sku:
          type: string
          description: Stock Keeping Unit (SKU) identifier
        productTypeName:
          type: string
          description: Name of the associated product type
        price:
          type: number
          format: float
          description: Product price
        mainPicture:
          type: string
          example: "https://yourserver.com/uploads/main_picture_550e8400-e29b-41d4-a716-446655440000.jpg"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request parameters"

  responses:
    NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"
      headers:
        Content-Type:
          description: "The content type of the response"
          schema:
            type: string
            example: "application/json"

    InternalServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An unexpected error occurred"
      headers:
        Content-Type:
          description: "The content type of the response"
          schema:
            type: string
            example: "application/json"
